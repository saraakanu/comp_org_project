.data
prompt:     .asciiz "Enter a positive integer greater than or equal to 25: "
error_msg:  .asciiz "Invalid input. Please enter a valid number.\n"
fib_msg:    .asciiz "Fibonacci sequence: "
newline:    .asciiz "\n"

.text
main:
    # Prompt the user for input
    li $v0, 4         # System call for print_str
    la $a0, prompt    # Load the address of the prompt string
    syscall

    # Get user input
    li $v0, 5         # System call for read_int
    syscall
    move $t0, $v0     # Save the entered number in $t0

    # Check if the entered number is valid
    bge $t0, 25, input_valid # Branch if the entered number is greater than or equal to 25
    li $v0, 4         # System call for print_str
    la $a0, error_msg # Load the address of the error message
    syscall
    j main            # Jump back to the beginning to prompt the user again

input_valid:
    # Initialize variables for Fibonacci sequence
    li $t1, 0         # First Fibonacci number
    li $t2, 1         # Second Fibonacci number
    li $t3, 0         # Counter

fibonacci_loop:
    # Print the current Fibonacci number
    li $v0, 1         # System call for print_int
    move $a0, $t1     # Load the current Fibonacci number
    syscall

    # Print a space
    li $v0, 4         # System call for print_str
    la $a0, " "       # Load the address of a space
    syscall

    # Calculate the next Fibonacci number
    add $t4, $t1, $t2 # Calculate the next Fibonacci number
    move $t1, $t2     # Move the second Fibonacci number to the first
    move $t2, $t4     # Move the next Fibonacci number to the second
   
    # Increment the counter
    addi $t3, $t3, 1

    # Check if we have printed N numbers (N = entered number)
    bne $t3, $t0, fibonacci_loop # Loop if the counter is less than N

    # Print a newline
